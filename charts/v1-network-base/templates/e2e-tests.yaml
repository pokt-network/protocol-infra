apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: dev-e2e-tests
spec:
  serviceAccountName: e2e-tests
  entrypoint: main
  activeDeadlineSeconds: 3600
  arguments:
    parameters:
      - name: gitsha

  templates:
    - name: main
      steps:
        - - name: ensure-version-step
            template: ensure-version
            arguments:
              parameters:
                - name: gitsha
                  value: "{{ "{{" }}workflow.parameters.gitsha{{ "}}" }}"
        # - - name: ensure-processes-running-step
        #     template: ensure-processes-running
        - - name: test-e2e-step
            template: test-e2e
            arguments:
              parameters:
                - name: gitsha
                  value: "{{ "{{" }}workflow.parameters.gitsha{{ "}}" }}"

    # This script ensures that all pods are running the expected image
    - name: ensure-version
      inputs:
        parameters:
        - name: gitsha
      script:
        image: bitnami/kubectl:1.26-debian-11
        entrypoint: [""]
        command: [bash]
        source: |
          #!/bin/bash
          set -e

          EXPECTED_IMAGE_TAG="sha-{{ "{{" }}inputs.parameters.gitsha{{ "}}" }}"

          START_TIME=$(date +%s)

          while true; do
              CURRENT_TIME=$(date +%s)
              TIME_DIFF=$((CURRENT_TIME - START_TIME))

              # Check if 30 minutes have passed (30 minutes = 1800 seconds)
              if [[ $TIME_DIFF -ge 1800 ]]; then
                  echo "Timeout reached: script has been running for 30 minutes."
                  break
              fi

              # Get all pods with label 'pokt.network/purpose'
              PODS=$(kubectl get pods -l pokt.network/purpose -o jsonpath='{range .items[*]}{@.metadata.name}{"\n"}{end}')

              UNEXPECTED_PODS=""

              # For each pod, get the image of the container named 'pocket'
              for POD in $PODS; do
                  FULL_IMAGE=$(kubectl get pod $POD -o jsonpath='{.spec.containers[?(@.name=="pocket")].image}')

                  # Extract the tag from the image string
                  IMAGE_TAG=${FULL_IMAGE##*:}

                  # Remove the '-dev' suffix from the image tag
                  IMAGE_TAG=${IMAGE_TAG%-dev}

                  echo "Checking Pod: $POD"
                  echo "Expected Image: $EXPECTED_IMAGE_TAG"
                  echo "Actual Image: $IMAGE_TAG"

                  # Compare the image with the expected image
                  if [[ "$IMAGE_TAG" != "$EXPECTED_IMAGE_TAG" ]]; then
                      echo "Pod $POD does not meet expectations. Expected $EXPECTED_IMAGE_TAG, but got $IMAGE_TAG."
                      UNEXPECTED_PODS+="$POD "
                  else
                      echo "Pod $POD meets expectations."
                  fi
              done

              # If all pods meet the expectation, break the loop
              if [[ -z "$UNEXPECTED_PODS" ]]; then
                  echo "All pods meet the expectations."
                  break
              else
                  echo "The following pods do not meet the expectations: $UNEXPECTED_PODS"
                  echo "Deleting the pods to let StatefulSet recreate them with correct version."

                  for UNEXPECTED_POD in $UNEXPECTED_PODS; do
                      kubectl delete pod $UNEXPECTED_POD
                      echo "Pod $UNEXPECTED_POD deleted"
                  done

                  echo "Retrying in 10 seconds..."
                  sleep 10
              fi
          done

    - name: ensure-processes-running
      script:
        image: bitnami/kubectl:1.26-debian-11
        entrypoint: [""]
        command: [bash]
        source: |
          #!/bin/bash

          while true; do
              PODS=$(kubectl get pods -l pokt.network/purpose -o jsonpath='{range .items[*]}{@.metadata.name}{"\n"}{end}') || { echo "Failed to get pods. Retrying in 10 seconds..."; sleep 10; continue; }

              NOT_RUNNING_PODS=""

              for POD in $PODS; do
                  CONTAINER_STATUS=$(kubectl get pod $POD -o jsonpath='{.status.containerStatuses[?(@.name=="pocket")].state.running}')

                  if [[ -z "$CONTAINER_STATUS" ]]; then
                      NOT_RUNNING_PODS+="$POD "
                  fi
              done

              if [[ -z "$NOT_RUNNING_PODS" ]]; then
                  echo "All pods are running."
                  break
              else
                  echo "The following pods are not running: $NOT_RUNNING_PODS. Check logs for more information."
                  echo "Retrying in 10 seconds..."
                  sleep 10
              fi
          done

    - name: test-e2e
      inputs:
        parameters:
        - name: gitsha
      container:
        image: "ghcr.io/pokt-network/pocket-v1:sha-{{ "{{" }}inputs.parameters.gitsha{{ "}}" }}-dev"
        imagePullPolicy: IfNotPresent
        command: [make, test_e2e]
        env:
          - name: RPC_HOST
            value: pocket-validators
          - name: POCKET_REMOTE_CLI_URL
            value: http://pocket-validators:50832
        resources:
          limits:
            cpu: "4"
            memory: 1Gi
          requests:
            cpu: 250m
            memory: 512Mi
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: e2e-tests
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: e2e-tests
subjects:
  - kind: ServiceAccount
    name: e2e-tests
    apiGroup: ""
roleRef:
  kind: Role
  name: e2e-tests
  apiGroup: ""
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: e2e-tests
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    resourceNames: ["validators-private-keys"]
    verbs: ["get"]
  - apiGroups: [""]
    resources: ["services"]
    verbs: ["watch"]

    # Allow to shell into `pocket-v1-cli-client` pod
  - apiGroups: ["apps"]
    resources: ["deployments"]
    verbs: ["get", "list"]
  - apiGroups: [""]
    resources: ["pods", "pods/log"]
    verbs: ["get", "list", "delete"]
  - apiGroups: [""]
    resources: ["pods/exec"]
    verbs: ["create"]
