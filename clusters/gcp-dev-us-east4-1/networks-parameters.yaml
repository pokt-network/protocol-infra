# This is a part of the infrastructure that provides an ability to scale networks programmatically and/or through the UI
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: networks-parameters-router-code
  namespace: default
data:
  server.py: |
    import json
    import requests
    from http.server import BaseHTTPRequestHandler, HTTPServer

    class Plugin(BaseHTTPRequestHandler):
        def get_args(self):
            content_length = int(self.headers.get('Content-Length'))
            post_data = self.rfile.read(content_length)
            return json.loads(post_data)

        def reply(self, reply):
            self.send_response(200)
            self.end_headers()
            self.wfile.write(json.dumps(reply).encode("UTF-8"))

        def unsupported(self):
            self.send_response(404)
            self.end_headers()

        def respond_defaults(self):
            self.reply({
                "output": {
                    "parameters": [
                        {
                            "fishermen": {"count": 1},
                            "full_nodes": {"count": 1},
                            "servicers": {"count": 1},
                            "validators": {"count": 4}
                        }
                    ]
                }
            })

        def do_POST(self):
            if self.path == '/api/v1/getparams.execute':
                args = self.get_args()
                network_name = args.get('input', {}).get('parameters', {}).get('networkName')
                if network_name:
                    try:
                        response = requests.get(f'http://explorer-dev.{network_name}:3000/api/network-parameters/get')
                        response.raise_for_status()
                        response_json = response.json()
                        self.reply(response_json)
                    except (requests.exceptions.RequestException, json.JSONDecodeError):
                        self.respond_defaults()
                    except Exception:
                        self.respond_defaults()
                else:
                    self.reply({"error": "networkName not provided"})
            else:
                self.unsupported()

        def do_GET(self):
            if self.path == '/':
                self.reply({"status": "ok"})
            else:
                self.unsupported()

    if __name__ == '__main__':
        httpd = HTTPServer(('', 80), Plugin)
        httpd.serve_forever()

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: networks-parameters-defaults
  namespace: default
spec:
  replicas: 2
  selector:
    matchLabels:
      app: networks-parameters-defaults
  template:
    metadata:
      labels:
        app: networks-parameters-defaults
    spec:
      volumes:
      - name: router-code
        configMap:
          name: networks-parameters-router-code
      containers:
      - name: python-router
        image: python:3.11-bullseye
        command: ["/bin/sh","-c"]
        args: ["pip install requests && python3 -u /app/server.py"]
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          limits:
            cpu: 500m
            memory: 256Mi
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /
            port: 80
            scheme: HTTP
        ports:
        - containerPort: 80
        volumeMounts:
        - name: router-code
          mountPath: /app
---
apiVersion: v1
kind: Service
metadata:
  name: networks-parameters-defaults
  namespace: default
spec:
  ports:
  - port: 80
  selector:
    app: networks-parameters-defaults
---
kind: Host
apiVersion: getambassador.io/v3alpha1
metadata:
  name: networks-parameters
  namespace: default
  annotations:
    external-dns.ambassador-service: emissary-ingress.emissary-ingress
spec:
  hostname: "v1-networks-parameters.dev-us-east4-1.poktnodes.network"
  tlsSecret:
    name: "wildcard-dev-us-east4-1--poktnodes--network-tls"
    namespace: emissary-ingress
---
kind: Mapping
apiVersion: getambassador.io/v3alpha1
metadata:
  name: networks-parameters
  namespace: default
spec:
  hostname: v1-networks-parameters.dev-us-east4-1.poktnodes.network
  prefix: /
  service: networks-parameters-defaults:80
  timeout_ms: 0
  idle_timeout_ms: 3600000
  connect_timeout_ms: 10000
---
# We're going to use this CM for ArgoCD plugin generator
apiVersion: v1
kind: ConfigMap
metadata:
  name: networks-parameters-plugin-creds
  namespace: argocd
data:
  token: "$networks-parameters-plugin-creds:dummyToken"
  baseUrl: "http://networks-parameters-defaults.default.svc.cluster.local."
---
apiVersion: v1
kind: Secret
metadata:
  name: networks-parameters-plugin-creds
  namespace: argocd
  labels:
    app.kubernetes.io/part-of: argocd
type: Opaque
stringData:
  # This is a dummy token, as we don't have anything to hide here
  # The secret value must be base64 encoded **once**
  # this value corresponds to: `printf "strong-password" | base64`
  dummyToken: "ZHVtbXlUb2tlbg=="
