apiVersion: v1
kind: Service
metadata:
  name: celestia-rollkit
  namespace: protocol-common
spec:
  selector:
    app: celestia-rollkit
  ports:
    - protocol: TCP
      name: core-rpc
      port: 26657
      targetPort: 26657
    - protocol: TCP
      name: rpc
      port: 26658
      targetPort: 26658
    - protocol: TCP
      name: gateway
      port: 26659
      targetPort: 26659
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: celestia-rollkit
  namespace: protocol-common
  labels:
    provisioned-by: "protocol"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: celestia-rollkit
  template:
    metadata:
      labels:
        app: celestia-rollkit
        provisioned-by: "protocol"
    spec:
      serviceAccountName: celestia-rollkit
      containers:
        - name: celestia
          resources:
            limits:
              cpu: "1"
              memory: "1Gi"
            requests:
              cpu: "0.2"
              memory: "512Mi"
          image: ghcr.io/rollkit/local-celestia-devnet:v0.12.1
          ports:
            - containerPort: 26657
            - containerPort: 26658
            - containerPort: 26659
          volumeMounts:
            - name: bridge-volume
              mountPath: /bridge
        - name: secret-update-sidecar
          image: ghcr.io/rollkit/local-celestia-devnet:v0.12.1
          command: ["/bin/bash", "-c", "--"]
          # TODO(@okdas): Very scary line. Basically, waits until the node key (NJ3XILLTMVRXEZLUFZVHO5A) exists, signs the JWT and pushes it to k8s secret.
          args:
            [
              'while true; do if [ -f /bridge/keys/NJ3XILLTMVRXEZLUFZVHO5A ]; then OUTPUT=$(celestia bridge --node.store /bridge auth admin); BASE64_OUTPUT=$(echo -n $OUTPUT | base64 -w 0); TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token); PAYLOAD=$(echo -n ''{"apiVersion":"v1","kind":"Secret","metadata":{"name":"celestia-secret"},"data":{"auth_token":"''${BASE64_OUTPUT}''"}}''); RESPONSE=$(curl -k -H "Authorization: Bearer $TOKEN" -H ''Content-Type: application/json'' -X PUT -d "$PAYLOAD" https://kubernetes.default.svc/api/v1/namespaces/protocol-common/secrets/celestia-secret); echo $RESPONSE | grep ''"code": 404'' >/dev/null && curl -k -H "Authorization: Bearer $TOKEN" -H ''Content-Type: application/json'' -X POST -d "$PAYLOAD" https://kubernetes.default.svc/api/v1/namespaces/protocol-common/secrets; while true; do sleep 86400; done; fi; sleep 2; done;',
            ]
          volumeMounts:
            - name: bridge-volume
              mountPath: /bridge
      volumes:
        - name: bridge-volume
          emptyDir: {}
        # - name: localnet-celestia-tokens
        #   secret:
        #     secretName: localnet-celestia-tokens
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: celestia-rollkit
  namespace: protocol-common
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: secret-manager
  namespace: protocol-common
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list", "create", "update"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: secret-manager-binding
  namespace: protocol-common
subjects:
  - kind: ServiceAccount
    name: celestia-rollkit
roleRef:
  kind: Role
  name: secret-manager
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: mirrors.kts.studio/v1alpha2
kind: SecretMirror
metadata:
  name: celestia-secret
  namespace: protocol-common
spec:
  source:
    name: celestia-secret
  destination:
    namespaces:
      - devnet-.+
