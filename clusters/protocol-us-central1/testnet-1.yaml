apiVersion: v1
kind: Namespace
metadata:
  name: testnet-1
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: testnet-1
  namespace: argocd
  labels:
    team: "protocol"
    purpose: "testnets"
    devnet: "testnet-1"
    provisioned-by: "protocol"
spec:
  project: default
  source:
    path: charts/rollkit-based-network
    repoURL: https://github.com/pokt-network/protocol-infra.git
    targetRevision: main
    helm:
      values: |
        image:
          tag: sha-1164e33
        network:
          name: 1
          type: testnet
        global:
          labels:
            team: "protocol"
            purpose: "testnet"
            devnet: "testnet-1"
            provisioned-by: "protocol"
        customConfigMap:
          configsName: configs-testnet-1
          keysName: keys-testnet-1
        charts:
          sequencer:
            branch: sequencer-prod
        sequencer:
          prod:
            enabled: true
            namespace: 0dfb53e3a8691803ca08
          storage:
            className: standard
            size: 50Gi
          dataAvailability:
            provider: celestia
            authToken:
              secretName: celestia-secret
              secretKey: auth_token
            celestia:
              consensus_rpc_url: http://rpc-mocha.pops.one:26657
              da_rpc_url: http://rpc-mocha.pops.one:26658


        # for troubleshooting: {{.}}

  destination:
    namespace: testnet-1
    server: https://kubernetes.default.svc
  # syncPolicy:
  #   syncOptions:
  #   - Validate=false
  # ignoreDifferences:
  # - group: apiextensions.k8s.io
  #   kind: CustomResourceDefinition
  #   jsonPointers:
  #   - /status
---
apiVersion: v1
data:
  app.toml: |
    app-db-backend = ""
    halt-height = 0
    halt-time = 0
    iavl-cache-size = 781250
    iavl-disable-fastnode = false
    iavl-lazy-loading = false
    index-events = []
    inter-block-cache = true
    min-retain-blocks = 0
    minimum-gas-prices = "0upokt"
    pruning = "default"
    pruning-interval = "0"
    pruning-keep-recent = "0"

    [api]
      address = "tcp://0.0.0.0:1317"
      enable = true
      enabled-unsafe-cors = true
      max-open-connections = 1000
      rpc-max-body-bytes = 1000000
      rpc-read-timeout = 10
      rpc-write-timeout = 0
      swagger = false

    [grpc]
      address = "localhost:9090"
      enable = true
      max-recv-msg-size = "10485760"
      max-send-msg-size = "2147483647"

    [grpc-web]
      address = "localhost:9091"
      enable = true
      enable-unsafe-cors = false

    [mempool]
      max-txs = "5000"

    [rosetta]
      address = ":8080"
      blockchain = "app"
      denom-to-suggest = "uatom"
      enable = false
      enable-fee-suggestion = false
      gas-to-suggest = 200000
      network = "network"
      offline = false
      retries = 3

    [rpc]
      cors_allowed_origins = ["*"]

    [state-sync]
      snapshot-interval = 0
      snapshot-keep-recent = 2

    [store]
      streamers = []

    [streamers]

      [streamers.file]
        fsync = "false"
        keys = ["*"]
        output-metadata = "true"
        prefix = ""
        stop-node-on-error = "true"
        write_dir = ""

    [telemetry]
      enable-hostname = false
      enable-hostname-label = false
      enable-service-label = false
      enabled = false
      global-labels = []
      prometheus-retention-time = 0
      service-name = ""
  client.toml: |
    broadcast-mode = "sync"
    chain-id = "poktroll"
    keyring-backend = "test"
    node = "tcp://localhost:26657"
    output = "text"
  config.toml: "# This is a TOML config file.\n# For more information, see https://github.com/toml-lang/toml\n\n#
    NOTE: Any path below can be absolute (e.g. \"/var/myawesomeapp/data\") or\n# relative
    to the home directory (e.g. \"data\"). The home directory is\n# \"$HOME/.cometbft\"
    by default, but could be changed via $CMTHOME env variable\n# or --home cmd flag.\n\n#######################################################################\n###
    \                  Main Base Config Options                      ###\n#######################################################################\n\n#
    TCP or UNIX socket address of the ABCI application,\n# or the name of an ABCI
    application compiled in with the CometBFT binary\nproxy_app = \"tcp://127.0.0.1:26658\"\n\n#
    A custom human readable name for this node\nmoniker = \"sequencer1\"\n\n# If this
    node is many blocks behind the tip of the chain, BlockSync\n# allows them to catchup
    quickly by downloading blocks in parallel\n# and verifying their commits\n#\n#
    Deprecated: this key will be removed and BlockSync will be enabled \n# unconditionally
    in the next major release.\nblock_sync = true\n\n# Database backend: goleveldb
    | cleveldb | boltdb | rocksdb | badgerdb\n# * goleveldb (github.com/syndtr/goleveldb
    - most popular implementation)\n#   - pure go\n#   - stable\n# * cleveldb (uses
    levigo wrapper)\n#   - fast\n#   - requires gcc\n#   - use cleveldb build tag
    (go build -tags cleveldb)\n# * boltdb (uses etcd's fork of bolt - github.com/etcd-io/bbolt)\n#
    \  - EXPERIMENTAL\n#   - may be faster is some use-cases (random reads - indexer)\n#
    \  - use boltdb build tag (go build -tags boltdb)\n# * rocksdb (uses github.com/tecbot/gorocksdb)\n#
    \  - EXPERIMENTAL\n#   - requires gcc\n#   - use rocksdb build tag (go build -tags
    rocksdb)\n# * badgerdb (uses github.com/dgraph-io/badger)\n#   - EXPERIMENTAL\n#
    \  - use badgerdb build tag (go build -tags badgerdb)\ndb_backend = \"goleveldb\"\n\n#
    Database directory\ndb_dir = \"data\"\n\n# Output level for logging, including
    package level options\nlog_level = \"info\"\n\n# Output format: 'plain' (colored
    text) or 'json'\nlog_format = \"plain\"\n\n##### additional base config options
    #####\n\n# Path to the JSON file containing the initial validator set and other
    meta data\ngenesis_file = \"config/genesis.json\"\n\n# Path to the JSON file containing
    the private key to use as a validator in the consensus protocol\npriv_validator_key_file
    = \"config/priv_validator_key.json\"\n\n# Path to the JSON file containing the
    last sign state of a validator\npriv_validator_state_file = \"data/priv_validator_state.json\"\n\n#
    TCP or UNIX socket address for CometBFT to listen on for\n# connections from an
    external PrivValidator process\npriv_validator_laddr = \"\"\n\n# Path to the JSON
    file containing the private key to use for node authentication in the p2p protocol\nnode_key_file
    = \"config/node_key.json\"\n\n# Mechanism to connect to the ABCI application:
    socket | grpc\nabci = \"socket\"\n\n# If true, query the ABCI app on connecting
    to a new peer\n# so the app can decide if we should keep the connection or not\nfilter_peers
    = false\n\n\n#######################################################################\n###
    \                Advanced Configuration Options                  ###\n#######################################################################\n\n#######################################################\n###
    \      RPC Server Configuration Options          ###\n#######################################################\n[rpc]\n\n#
    TCP or UNIX socket address for the RPC server to listen on\nladdr = \"tcp://0.0.0.0:26657\"\n\n#
    A list of origins a cross-domain request can be executed from\n# Default value
    '[]' disables cors support\n# Use '[\"*\"]' to allow any origin\ncors_allowed_origins
    = [\"*\", ]\n\n# A list of methods the client is allowed to use with cross-domain
    requests\ncors_allowed_methods = [\"HEAD\", \"GET\", \"POST\", ]\n\n# A list of
    non simple headers the client is allowed to use with cross-domain requests\ncors_allowed_headers
    = [\"Origin\", \"Accept\", \"Content-Type\", \"X-Requested-With\", \"X-Server-Time\",
    ]\n\n# TCP or UNIX socket address for the gRPC server to listen on\n# NOTE: This
    server only supports /broadcast_tx_commit\ngrpc_laddr = \"\"\n\n# Maximum number
    of simultaneous connections.\n# Does not include RPC (HTTP&WebSocket) connections.
    See max_open_connections\n# If you want to accept a larger number than the default,
    make sure\n# you increase your OS limits.\n# 0 - unlimited.\n# Should be < {ulimit
    -Sn} - {MaxNumInboundPeers} - {MaxNumOutboundPeers} - {N of wal, db and other
    open files}\n# 1024 - 40 - 10 - 50 = 924 = ~900\ngrpc_max_open_connections = 900\n\n#
    Activate unsafe RPC commands like /dial_seeds and /unsafe_flush_mempool\nunsafe
    = false\n\n# Maximum number of simultaneous connections (including WebSocket).\n#
    Does not include gRPC connections. See grpc_max_open_connections\n# If you want
    to accept a larger number than the default, make sure\n# you increase your OS
    limits.\n# 0 - unlimited.\n# Should be < {ulimit -Sn} - {MaxNumInboundPeers} -
    {MaxNumOutboundPeers} - {N of wal, db and other open files}\n# 1024 - 40 - 10
    - 50 = 924 = ~900\nmax_open_connections = 900\n\n# Maximum number of unique clientIDs
    that can /subscribe\n# If you're using /broadcast_tx_commit, set to the estimated
    maximum number\n# of broadcast_tx_commit calls per block.\nmax_subscription_clients
    = 100\n\n# Maximum number of unique queries a given client can /subscribe to\n#
    If you're using GRPC (or Local RPC client) and /broadcast_tx_commit, set to\n#
    the estimated # maximum number of broadcast_tx_commit calls per block.\nmax_subscriptions_per_client
    = 5\n\n# Experimental parameter to specify the maximum number of events a node
    will\n# buffer, per subscription, before returning an error and closing the\n#
    subscription. Must be set to at least 100, but higher values will accommodate\n#
    higher event throughput rates (and will use more memory).\nexperimental_subscription_buffer_size
    = 200\n\n# Experimental parameter to specify the maximum number of RPC responses
    that\n# can be buffered per WebSocket client. If clients cannot read from the\n#
    WebSocket endpoint fast enough, they will be disconnected, so increasing this\n#
    parameter may reduce the chances of them being disconnected (but will cause\n#
    the node to use more memory).\n#\n# Must be at least the same as \"experimental_subscription_buffer_size\",\n#
    otherwise connections could be dropped unnecessarily. This value should\n# ideally
    be somewhat higher than \"experimental_subscription_buffer_size\" to\n# accommodate
    non-subscription-related RPC responses.\nexperimental_websocket_write_buffer_size
    = 200\n\n# If a WebSocket client cannot read fast enough, at present we may\n#
    silently drop events instead of generating an error or disconnecting the\n# client.\n#\n#
    Enabling this experimental parameter will cause the WebSocket connection to\n#
    be closed instead if it cannot read fast enough, allowing for greater\n# predictability
    in subscription behavior.\nexperimental_close_on_slow_client = false\n\n# How
    long to wait for a tx to be committed during /broadcast_tx_commit.\n# WARNING:
    Using a value larger than 10s will result in increasing the\n# global HTTP write
    timeout, which applies to all connections and endpoints.\n# See https://github.com/tendermint/tendermint/issues/3435\ntimeout_broadcast_tx_commit
    = \"10s\"\n\n# Maximum size of request body, in bytes\nmax_body_bytes = 1000000\n\n#
    Maximum size of request header, in bytes\nmax_header_bytes = 1048576\n\n# The
    path to a file containing certificate that is used to create the HTTPS server.\n#
    Might be either absolute path or path related to CometBFT's config directory.\n#
    If the certificate is signed by a certificate authority,\n# the certFile should
    be the concatenation of the server's certificate, any intermediates,\n# and the
    CA's certificate.\n# NOTE: both tls_cert_file and tls_key_file must be present
    for CometBFT to create HTTPS server.\n# Otherwise, HTTP server is run.\ntls_cert_file
    = \"\"\n\n# The path to a file containing matching private key that is used to
    create the HTTPS server.\n# Might be either absolute path or path related to CometBFT's
    config directory.\n# NOTE: both tls-cert-file and tls-key-file must be present
    for CometBFT to create HTTPS server.\n# Otherwise, HTTP server is run.\ntls_key_file
    = \"\"\n\n# pprof listen address (https://golang.org/pkg/net/http/pprof)\npprof_laddr
    = \"localhost:6060\"\n\n#######################################################\n###
    \          P2P Configuration Options             ###\n#######################################################\n[p2p]\n\n#
    Address to listen for incoming connections\nladdr = \"tcp://0.0.0.0:26656\"\n\n#
    Address to advertise to peers for them to dial\n# If empty, will use the same
    port as the laddr,\n# and will introspect on the listener or use UPnP\n# to figure
    out the address. ip and port are required\n# example: 159.89.10.97:26656\nexternal_address
    = \"\"\n\n# Comma separated list of seed nodes to connect to\nseeds = \"\"\n\n#
    Comma separated list of nodes to keep persistent connections to\npersistent_peers
    = \"\"\n\n# UPNP port forwarding\nupnp = false\n\n# Path to address book\naddr_book_file
    = \"config/addrbook.json\"\n\n# Set true for strict address routability rules\n#
    Set false for private or local networks\naddr_book_strict = true\n\n# Maximum
    number of inbound peers\nmax_num_inbound_peers = 40\n\n# Maximum number of outbound
    peers to connect to, excluding persistent peers\nmax_num_outbound_peers = 10\n\n#
    List of node IDs, to which a connection will be (re)established ignoring any existing
    limits\nunconditional_peer_ids = \"\"\n\n# Maximum pause when redialing a persistent
    peer (if zero, exponential backoff is used)\npersistent_peers_max_dial_period
    = \"0s\"\n\n# Time to wait before flushing messages out on the connection\nflush_throttle_timeout
    = \"100ms\"\n\n# Maximum size of a message packet payload, in bytes\nmax_packet_msg_payload_size
    = 1024\n\n# Rate at which packets can be sent, in bytes/second\nsend_rate = 5120000\n\n#
    Rate at which packets can be received, in bytes/second\nrecv_rate = 5120000\n\n#
    Set true to enable the peer-exchange reactor\npex = true\n\n# Seed mode, in which
    node constantly crawls the network and looks for\n# peers. If another node asks
    it for addresses, it responds and disconnects.\n#\n# Does not work if the peer-exchange
    reactor is disabled.\nseed_mode = false\n\n# Comma separated list of peer IDs
    to keep private (will not be gossiped to other peers)\nprivate_peer_ids = \"\"\n\n#
    Toggle to disable guard against peers connecting from the same ip.\nallow_duplicate_ip
    = false\n\n# Peer connection configuration.\nhandshake_timeout = \"20s\"\ndial_timeout
    = \"3s\"\n\n#######################################################\n###          Mempool
    Configuration Option          ###\n#######################################################\n[mempool]\n\n#
    Mempool version to use:\n#   1) \"v0\" - (default) FIFO mempool.\n#   2) \"v1\"
    - prioritized mempool (deprecated; will be removed in the next release).\nversion
    = \"v0\"\n\nrecheck = true\nbroadcast = true\nwal_dir = \"\"\n\n# Maximum number
    of transactions in the mempool\nsize = 5000\n\n# Limit the total size of all txs
    in the mempool.\n# This only accounts for raw transactions (e.g. given 1MB transactions
    and\n# max_txs_bytes=5MB, mempool will only accept 5 transactions).\nmax_txs_bytes
    = 1073741824\n\n# Size of the cache (used to filter transactions we saw earlier)
    in transactions\ncache_size = 10000\n\n# Do not remove invalid transactions from
    the cache (default: false)\n# Set to true if it's not possible for any invalid
    transaction to become valid\n# again in the future.\nkeep-invalid-txs-in-cache
    = false\n\n# Maximum size of a single transaction.\n# NOTE: the max size of a
    tx transmitted over the network is {max_tx_bytes}.\nmax_tx_bytes = 1048576\n\n#
    Maximum size of a batch of transactions to send to a peer\n# Including space needed
    by encoding (one varint per transaction).\n# XXX: Unused due to https://github.com/tendermint/tendermint/issues/5796\nmax_batch_bytes
    = 0\n\n# ttl-duration, if non-zero, defines the maximum amount of time a transaction\n#
    can exist for in the mempool.\n#\n# Note, if ttl-num-blocks is also defined, a
    transaction will be removed if it\n# has existed in the mempool at least ttl-num-blocks
    number of blocks or if it's\n# insertion time into the mempool is beyond ttl-duration.\nttl-duration
    = \"0s\"\n\n# ttl-num-blocks, if non-zero, defines the maximum number of blocks
    a transaction\n# can exist for in the mempool.\n#\n# Note, if ttl-duration is
    also defined, a transaction will be removed if it\n# has existed in the mempool
    at least ttl-num-blocks number of blocks or if\n# it's insertion time into the
    mempool is beyond ttl-duration.\nttl-num-blocks = 0\n\n#######################################################\n###
    \        State Sync Configuration Options        ###\n#######################################################\n[statesync]\n#
    State sync rapidly bootstraps a new node by discovering, fetching, and restoring
    a state machine\n# snapshot from peers instead of fetching and replaying historical
    blocks. Requires some peers in\n# the network to take and serve state machine
    snapshots. State sync is not attempted if the node\n# has any local state (LastBlockHeight
    > 0). The node will have a truncated block history,\n# starting from the height
    of the snapshot.\nenable = false\n\n# RPC servers (comma-separated) for light
    client verification of the synced state machine and\n# retrieval of state data
    for node bootstrapping. Also needs a trusted height and corresponding\n# header
    hash obtained from a trusted source, and a period during which validators can
    be trusted.\n#\n# For Cosmos SDK-based chains, trust_period should usually be
    about 2/3 of the unbonding time (~2\n# weeks) during which they can be financially
    punished (slashed) for misbehavior.\nrpc_servers = \"\"\ntrust_height = 0\ntrust_hash
    = \"\"\ntrust_period = \"168h0m0s\"\n\n# Time to spend discovering snapshots before
    initiating a restore.\ndiscovery_time = \"15s\"\n\n# Temporary directory for state
    sync snapshot chunks, defaults to the OS tempdir (typically /tmp).\n# Will create
    a new, randomly named directory within, and remove it when done.\ntemp_dir = \"\"\n\n#
    The timeout duration before re-requesting a chunk, possibly from a different\n#
    peer (default: 1 minute).\nchunk_request_timeout = \"10s\"\n\n# The number of
    concurrent chunk fetchers to run (default: 1).\nchunk_fetchers = \"4\"\n\n#######################################################\n###
    \      Block Sync Configuration Options          ###\n#######################################################\n[blocksync]\n\n#
    Block Sync version to use:\n# \n# In v0.37, v1 and v2 of the block sync protocols
    were deprecated.\n# Please use v0 instead.\n#\n#   1) \"v0\" - the default block
    sync implementation\nversion = \"v0\"\n\n#######################################################\n###
    \        Consensus Configuration Options         ###\n#######################################################\n[consensus]\n\nwal_file
    = \"data/cs.wal/wal\"\n\n# How long we wait for a proposal block before prevoting
    nil\ntimeout_propose = \"1s\"\n# How much timeout_propose increases with each
    round\ntimeout_propose_delta = \"500ms\"\n# How long we wait after receiving +2/3
    prevotes for “anything” (ie. not a single block or nil)\ntimeout_prevote = \"1s\"\n#
    How much the timeout_prevote increases with each round\ntimeout_prevote_delta
    = \"500ms\"\n# How long we wait after receiving +2/3 precommits for “anything”
    (ie. not a single block or nil)\ntimeout_precommit = \"1s\"\n# How much the timeout_precommit
    increases with each round\ntimeout_precommit_delta = \"500ms\"\n# How long we
    wait after committing a block, before starting on the new\n# height (this gives
    us a chance to receive some more precommits, even\n# though we already have +2/3).\ntimeout_commit
    = \"1s\"\n\n# How many blocks to look back to check existence of the node's consensus
    votes before joining consensus\n# When non-zero, the node will panic upon restart\n#
    if the same consensus key was used to sign {double_sign_check_height} last blocks.\n#
    So, validators should stop the state machine, wait for some blocks, and then restart
    the state machine to avoid panic.\ndouble_sign_check_height = 0\n\n# Make progress
    as soon as we have all the precommits (as if TimeoutCommit = 0)\nskip_timeout_commit
    = false\n\n# EmptyBlocks mode and possible interval between empty blocks\ncreate_empty_blocks
    = true\ncreate_empty_blocks_interval = \"0s\"\n\n# Reactor sleep duration parameters\npeer_gossip_sleep_duration
    = \"100ms\"\npeer_query_maj23_sleep_duration = \"2s\"\n\n#######################################################\n###
    \        Storage Configuration Options           ###\n#######################################################\n[storage]\n\n#
    Set to true to discard ABCI responses from the state store, which can save a\n#
    considerable amount of disk space. Set to false to ensure ABCI responses are\n#
    persisted. ABCI responses are required for /block_results RPC queries, and to\n#
    reindex events in the command-line tool.\ndiscard_abci_responses = false\n\n#######################################################\n###
    \  Transaction Indexer Configuration Options     ###\n#######################################################\n[tx_index]\n\n#
    What indexer to use for transactions\n#\n# The application will set which txs
    to index. In some cases a node operator will be able\n# to decide which txs to
    index based on configuration set in the application.\n#\n# Options:\n#   1) \"null\"\n#
    \  2) \"kv\" (default) - the simplest possible indexer, backed by key-value storage
    (defaults to levelDB; see DBBackend).\n# \t\t- When \"kv\" is chosen \"tx.height\"
    and \"tx.hash\" will always be indexed.\n#   3) \"psql\" - the indexer services
    backed by PostgreSQL.\n# When \"kv\" or \"psql\" is chosen \"tx.height\" and \"tx.hash\"
    will always be indexed.\nindexer = \"kv\"\n\n# The PostgreSQL connection configuration,
    the connection format:\n#   postgresql://<user>:<password>@<host>:<port>/<db>?<opts>\npsql-conn
    = \"\"\n\n#######################################################\n###       Instrumentation
    Configuration Options     ###\n#######################################################\n[instrumentation]\n\n#
    When true, Prometheus metrics are served under /metrics on\n# PrometheusListenAddr.\n#
    Check out the documentation for the list of available metrics.\nprometheus = false\n\n#
    Address to listen for Prometheus collector(s) connections\nprometheus_listen_addr
    = \":26660\"\n\n# Maximum number of simultaneous connections.\n# If you want to
    accept a larger number than the default, make sure\n# you increase your OS limits.\n#
    0 - unlimited.\nmax_open_connections = 3\n\n# Instrumentation namespace\nnamespace
    = \"cometbft\"\n"
  genesis.json: |-
    {
      "genesis_time": "2023-12-06T20:42:41.468131958Z",
      "chain_id": "poktroll",
      "initial_height": "1",
      "consensus_params": {
        "block": {
          "max_bytes": "22020096",
          "max_gas": "-1"
        },
        "evidence": {
          "max_age_num_blocks": "100000",
          "max_age_duration": "172800000000000",
          "max_bytes": "1048576"
        },
        "validator": {
          "pub_key_types": [
            "ed25519"
          ]
        },
        "version": {
          "app": "0"
        }
      },
      "app_hash": "",
      "app_state": {
        "06-solomachine": null,
        "07-tendermint": null,
        "application": {
          "applicationList": [
            {
              "address": "pokt1mrqt5f7qh8uxs27cjm9t7v9e74a9vvdnq5jva4",
              "delegatee_gateway_addresses": [],
              "service_configs": [
                {
                  "service": {
                    "id": "anvil",
                    "name": ""
                  }
                }
              ],
              "stake": {
                "amount": "1000",
                "denom": "upokt"
              }
            }
          ],
          "params": {
            "maxDelegatedGateways": 7,
            "max_delegated_gateways": "7"
          }
        },
        "auth": {
          "params": {
            "max_memo_characters": "256",
            "tx_sig_limit": "7",
            "tx_size_cost_per_byte": "10",
            "sig_verify_cost_ed25519": "590",
            "sig_verify_cost_secp256k1": "1000"
          },
          "accounts": [
            {
              "@type": "/cosmos.auth.v1beta1.BaseAccount",
              "address": "pokt1awtlw5sjmw2f5lgj8ekdkaqezphgz88rdk93sk",
              "pub_key": null,
              "account_number": "0",
              "sequence": "0"
            },
            {
              "@type": "/cosmos.auth.v1beta1.BaseAccount",
              "address": "pokt18kk3aqe2pjz7x7993qp2pjt95ghurra9682tyn",
              "pub_key": null,
              "account_number": "1",
              "sequence": "0"
            },
            {
              "@type": "/cosmos.auth.v1beta1.BaseAccount",
              "address": "pokt1mrqt5f7qh8uxs27cjm9t7v9e74a9vvdnq5jva4",
              "pub_key": null,
              "account_number": "2",
              "sequence": "0"
            },
            {
              "@type": "/cosmos.auth.v1beta1.BaseAccount",
              "address": "pokt184zvylazwu4queyzpl0gyz9yf5yxm2kdhh9hpm",
              "pub_key": null,
              "account_number": "3",
              "sequence": "0"
            },
            {
              "@type": "/cosmos.auth.v1beta1.BaseAccount",
              "address": "pokt1lqyu4v88vp8tzc86eaqr4lq8rwhssyn6rfwzex",
              "pub_key": null,
              "account_number": "4",
              "sequence": "0"
            },
            {
              "@type": "/cosmos.auth.v1beta1.BaseAccount",
              "address": "pokt19a3t4yunp0dlpfjrp7qwnzwlrzd5fzs2gjaaaj",
              "pub_key": null,
              "account_number": "5",
              "sequence": "0"
            },
            {
              "@type": "/cosmos.auth.v1beta1.BaseAccount",
              "address": "pokt1re27pw4llwnatx4sq7rlggqzcm6j3f39epq2wa",
              "pub_key": null,
              "account_number": "6",
              "sequence": "0"
            },
            {
              "@type": "/cosmos.auth.v1beta1.BaseAccount",
              "address": "pokt1j6dun0x8eyq5mmsmq83zs3c2utt85q8478c89u",
              "pub_key": null,
              "account_number": "7",
              "sequence": "0"
            },
            {
              "@type": "/cosmos.auth.v1beta1.BaseAccount",
              "address": "pokt15vzxjqklzjtlz7lahe8z2dfe9nm5vxwwmscne4",
              "pub_key": null,
              "account_number": "8",
              "sequence": "0"
            },
            {
              "@type": "/cosmos.auth.v1beta1.BaseAccount",
              "address": "pokt15w3fhfyc0lttv7r585e2ncpf6t2kl9uh8rsnyz",
              "pub_key": null,
              "account_number": "9",
              "sequence": "0"
            },
            {
              "@type": "/cosmos.auth.v1beta1.BaseAccount",
              "address": "pokt1zhmkkd0rh788mc9prfq0m2h88t9ge0j83gnxya",
              "pub_key": null,
              "account_number": "10",
              "sequence": "0"
            }
          ]
        },
        "authz": {
          "authorization": []
        },
        "bank": {
          "params": {
            "send_enabled": [],
            "default_send_enabled": true
          },
          "balances": [
            {
              "address": "pokt1zhmkkd0rh788mc9prfq0m2h88t9ge0j83gnxya",
              "coins": [
                {
                  "denom": "upokt",
                  "amount": "300000000"
                }
              ]
            },
            {
              "address": "pokt1re27pw4llwnatx4sq7rlggqzcm6j3f39epq2wa",
              "coins": [
                {
                  "denom": "upokt",
                  "amount": "220000000"
                }
              ]
            },
            {
              "address": "pokt19a3t4yunp0dlpfjrp7qwnzwlrzd5fzs2gjaaaj",
              "coins": [
                {
                  "denom": "upokt",
                  "amount": "110000000"
                }
              ]
            },
            {
              "address": "pokt184zvylazwu4queyzpl0gyz9yf5yxm2kdhh9hpm",
              "coins": [
                {
                  "denom": "upokt",
                  "amount": "200000000"
                }
              ]
            },
            {
              "address": "pokt18kk3aqe2pjz7x7993qp2pjt95ghurra9682tyn",
              "coins": [
                {
                  "denom": "upokt",
                  "amount": "900000000000000"
                }
              ]
            },
            {
              "address": "pokt1j6dun0x8eyq5mmsmq83zs3c2utt85q8478c89u",
              "coins": [
                {
                  "denom": "upokt",
                  "amount": "330000000"
                }
              ]
            },
            {
              "address": "pokt15vzxjqklzjtlz7lahe8z2dfe9nm5vxwwmscne4",
              "coins": [
                {
                  "denom": "upokt",
                  "amount": "100000000"
                }
              ]
            },
            {
              "address": "pokt15w3fhfyc0lttv7r585e2ncpf6t2kl9uh8rsnyz",
              "coins": [
                {
                  "denom": "upokt",
                  "amount": "200000000"
                }
              ]
            },
            {
              "address": "pokt1mrqt5f7qh8uxs27cjm9t7v9e74a9vvdnq5jva4",
              "coins": [
                {
                  "denom": "upokt",
                  "amount": "100000000"
                }
              ]
            },
            {
              "address": "pokt1awtlw5sjmw2f5lgj8ekdkaqezphgz88rdk93sk",
              "coins": [
                {
                  "denom": "upokt",
                  "amount": "999999999999999999"
                }
              ]
            },
            {
              "address": "pokt1lqyu4v88vp8tzc86eaqr4lq8rwhssyn6rfwzex",
              "coins": [
                {
                  "denom": "upokt",
                  "amount": "300000000"
                }
              ]
            }
          ],
          "supply": [],
          "denom_metadata": [],
          "send_enabled": []
        },
        "capability": {
          "index": "1",
          "owners": []
        },
        "consensus": null,
        "crisis": {
          "constant_fee": {
            "amount": "10000",
            "denom": "upokt"
          }
        },
        "distribution": {
          "delegator_starting_infos": [],
          "delegator_withdraw_infos": [],
          "fee_pool": {
            "community_pool": []
          },
          "outstanding_rewards": [],
          "params": {
            "base_proposer_reward": "0.000000000000000000",
            "bonus_proposer_reward": "0.000000000000000000",
            "community_tax": "0.020000000000000000",
            "withdraw_addr_enabled": true
          },
          "previous_proposer": "",
          "validator_accumulated_commissions": [],
          "validator_current_rewards": [],
          "validator_historical_rewards": [],
          "validator_slash_events": []
        },
        "evidence": {
          "evidence": []
        },
        "feegrant": {
          "allowances": []
        },
        "gateway": {
          "gatewayList": [],
          "params": {}
        },
        "genutil": {
          "gen_txs": [
            {
              "body": {
                "messages": [
                  {
                    "@type": "/cosmos.staking.v1beta1.MsgCreateValidator",
                    "description": {
                      "moniker": "sequencer1",
                      "identity": "",
                      "website": "",
                      "security_contact": "",
                      "details": ""
                    },
                    "commission": {
                      "rate": "0.100000000000000000",
                      "max_rate": "0.200000000000000000",
                      "max_change_rate": "0.010000000000000000"
                    },
                    "min_self_delegation": "1",
                    "delegator_address": "pokt18kk3aqe2pjz7x7993qp2pjt95ghurra9682tyn",
                    "validator_address": "poktvaloper18kk3aqe2pjz7x7993qp2pjt95ghurra9c5ef0t",
                    "pubkey": {
                      "@type": "/cosmos.crypto.ed25519.PubKey",
                      "key": "kM1fsa0hRv2WTiRN8uUkhLafyiuAEDJjKGrr811Mu4s="
                    },
                    "value": {
                      "denom": "upokt",
                      "amount": "900000000"
                    }
                  }
                ],
                "memo": "7e8a2bc90b2b2a442966d6c148854045ae8b6153@172.17.0.2:26656",
                "timeout_height": "0",
                "extension_options": [],
                "non_critical_extension_options": []
              },
              "auth_info": {
                "signer_infos": [
                  {
                    "public_key": {
                      "@type": "/cosmos.crypto.secp256k1.PubKey",
                      "key": "Ao8usGLm8DesmcEEJ/iIMMr0fnA+mKCCmIJ/aG0HSbwy"
                    },
                    "mode_info": {
                      "single": {
                        "mode": "SIGN_MODE_DIRECT"
                      }
                    },
                    "sequence": "0"
                  }
                ],
                "fee": {
                  "amount": [],
                  "gas_limit": "200000",
                  "payer": "",
                  "granter": ""
                },
                "tip": null
              },
              "signatures": [
                "Ha6Glagwgx+dPAC01tStMtDusL4jDOQJmN5qyr26JQJStsw53Yr/9a1eqt5wwKj8YTz5pDfTT8F9g6se32PUTQ=="
              ]
            }
          ]
        },
        "gov": {
          "deposit_params": null,
          "deposits": [],
          "params": {
            "burn_proposal_deposit_prevote": false,
            "burn_vote_quorum": false,
            "burn_vote_veto": true,
            "max_deposit_period": "172800s",
            "min_deposit": [
              {
                "amount": "10000",
                "denom": "upokt"
              }
            ],
            "min_initial_deposit_ratio": "0.000000000000000000",
            "quorum": "0.334000000000000000",
            "threshold": "0.500000000000000000",
            "veto_threshold": "0.334000000000000000",
            "voting_period": "172800s"
          },
          "proposals": [],
          "starting_proposal_id": "1",
          "tally_params": null,
          "votes": [],
          "voting_params": null
        },
        "group": {
          "group_members": [],
          "group_policies": [],
          "group_policy_seq": "0",
          "group_seq": "0",
          "groups": [],
          "proposal_seq": "0",
          "proposals": [],
          "votes": []
        },
        "ibc": {
          "channel_genesis": {
            "ack_sequences": [],
            "acknowledgements": [],
            "channels": [],
            "commitments": [],
            "next_channel_sequence": "0",
            "receipts": [],
            "recv_sequences": [],
            "send_sequences": []
          },
          "client_genesis": {
            "clients": [],
            "clients_consensus": [],
            "clients_metadata": [],
            "create_localhost": false,
            "next_client_sequence": "0",
            "params": {
              "allowed_clients": [
                "06-solomachine",
                "07-tendermint",
                "09-localhost"
              ]
            }
          },
          "connection_genesis": {
            "client_connection_paths": [],
            "connections": [],
            "next_connection_sequence": "0",
            "params": {
              "max_expected_time_per_block": "30000000000"
            }
          }
        },
        "interchainaccounts": {
          "controller_genesis_state": {
            "active_channels": [],
            "interchain_accounts": [],
            "params": {
              "controller_enabled": true
            },
            "ports": []
          },
          "host_genesis_state": {
            "active_channels": [],
            "interchain_accounts": [],
            "params": {
              "allow_messages": [
                "*"
              ],
              "host_enabled": true
            },
            "port": "icahost"
          }
        },
        "mint": {
          "minter": {
            "annual_provisions": "0.000000000000000000",
            "inflation": "0.130000000000000000"
          },
          "params": {
            "blocks_per_year": "6311520",
            "goal_bonded": "0.670000000000000000",
            "inflation_max": "0.200000000000000000",
            "inflation_min": "0.070000000000000000",
            "inflation_rate_change": "0.130000000000000000",
            "mint_denom": "upokt"
          }
        },
        "params": null,
        "pocket": {
          "params": {}
        },
        "service": {
          "params": {}
        },
        "session": {
          "params": {}
        },
        "slashing": {
          "missed_blocks": [],
          "params": {
            "downtime_jail_duration": "600s",
            "min_signed_per_window": "0.500000000000000000",
            "signed_blocks_window": "100",
            "slash_fraction_double_sign": "0.050000000000000000",
            "slash_fraction_downtime": "0.010000000000000000"
          },
          "signing_infos": []
        },
        "staking": {
          "delegations": [],
          "exported": false,
          "last_total_power": "0",
          "last_validator_powers": [],
          "params": {
            "bond_denom": "upokt",
            "historical_entries": 10000,
            "max_entries": 7,
            "max_validators": 100,
            "min_commission_rate": "0.000000000000000000",
            "unbonding_time": "1814400s"
          },
          "redelegations": [],
          "unbonding_delegations": [],
          "validators": []
        },
        "supplier": {
          "params": {},
          "supplierList": [
            {
              "address": "pokt19a3t4yunp0dlpfjrp7qwnzwlrzd5fzs2gjaaaj",
              "services": [
                {
                  "endpoints": [
                    {
                      "configs": [],
                      "rpc_type": "JSON_RPC",
                      "url": "http://relayminers:8545"
                    }
                  ],
                  "service": {
                    "id": "anvil",
                    "name": ""
                  }
                }
              ],
              "stake": {
                "amount": "1000",
                "denom": "upokt"
              }
            }
          ]
        },
        "transfer": {
          "denom_traces": [],
          "params": {
            "receive_enabled": true,
            "send_enabled": true
          },
          "port_id": "transfer",
          "total_escrowed": []
        },
        "upgrade": {},
        "vesting": {}
      }
    }
  node_key.json: '{"priv_key":{"type":"tendermint/PrivKeyEd25519","value":"Ado+qSLoFcZshCeyVNZMTncLMyG763RHTfrOKfuANRrTFu6oRlbkjrlziizi8pM9RvNnx/OuPawrZ1nr/+9YKQ=="}}'
  priv_validator_key.json: |-
    {
      "address": "D2E85F34F2D21E29C074640428B774C841DA2841",
      "pub_key": {
        "type": "tendermint/PubKeyEd25519",
        "value": "kM1fsa0hRv2WTiRN8uUkhLafyiuAEDJjKGrr811Mu4s="
      },
      "priv_key": {
        "type": "tendermint/PrivKeyEd25519",
        "value": "V1LxMB/pZApJzFA8zT0wR4JYSnZJQmSk4fi496/OCcuQzV+xrSFG/ZZOJE3y5SSEtp/KK4AQMmMoauvzXUy7iw=="
      }
    }
kind: ConfigMap
metadata:
  name: configs-testnet-1
  namespace: testnet-1
---
# TODO: these should be secret ofc..
apiVersion: v1
data:
  2f62ba93930bdbf0a6430f80e989df189b448a0a.address: eyJhbGciOiJQQkVTMi1IUzI1NitBMTI4S1ciLCJjcmVhdGVkIjoiMjAyMy0xMi0wNiAyMDo0Mjo0My4wMDUwMzE2NjYgKzAwMDAgVVRDIG09KzAuMDY1MTM3Njk2IiwiZW5jIjoiQTI1NkdDTSIsInAyYyI6ODE5MiwicDJzIjoiTHg1VTltaHlIeVNpeVNmYSJ9.HcWkOnl43y9zqpu5LlcAl4kmq6EMZvv6885peNGFMp7ILh91-suhbQ.qH8N60Oet6Yasgnn.fC6FnkNHCDdxNGZknflLRKtsCZG8A8MlagP0o8aomd2SAsfpyohZZ05tOL-aaWoNAoMoWM2VBc8ozQTQG0VwYb8bG-u6mVr7mEWGY0XShwPf6Ny16xFxS5uH6aixzZ6vtF--aF-Us_Ref6e8-3Bcm0rYYnD_zTCyfqTQ70-C6sqEDK__tFwdxCyuysHAs8VHpklOx7WlfqjxL5kw0rLkVmvRYymIOzffOPSa0SpbdDDq4dfieKo24sjm.uSjTivwvTFUE6IpklcU9sw
  3d44c27fa2772a0e64820fde8208a44d086daacd.address: eyJhbGciOiJQQkVTMi1IUzI1NitBMTI4S1ciLCJjcmVhdGVkIjoiMjAyMy0xMi0wNiAyMDo0Mjo0Mi40MzA2Mjg1NjggKzAwMDAgVVRDIG09KzAuMDYzOTcyNTE2IiwiZW5jIjoiQTI1NkdDTSIsInAyYyI6ODE5MiwicDJzIjoiN3dSVHlUNzZkeWlQUkctNSJ9.OV1JM1O5SMHYb4HnBPZqM7TVbGfjOO8g-R2yIILiGqVEtyEcI1cFLQ.bLUi7dqeMLaiGPTH.xYTxlZIybni5FV_EI9APp61NF1iTknmdFNxmyn9NiQYL0_KLsPxTIIZ5pB2A0EKiW_ig4FTh-qc4vU9k7x4dXXCb_jkplyf_GdCRlcXmM72gUKjoyV10y6eXu5AtCLtULADS0nIzuzDEqVVquNW1P0sAYEw_dXwMywO-EwCDWgrkBphTWFiT-PSCPlFBfbUGrspn7Jb1YZFXidX4WuPqP00hSJnZQ_5JkM2yLUTf-KWZog.PqGlAw2DLbNHLrgcBjr4rw
  15f76b35e3bf8e7de0a11a40fdaae73aca8cbe47.address: eyJhbGciOiJQQkVTMi1IUzI1NitBMTI4S1ciLCJjcmVhdGVkIjoiMjAyMy0xMi0wNiAyMDo0Mjo0NC40OTg3MDQ4NCArMDAwMCBVVEMgbT0rMC4wNjYwMTU2MDUiLCJlbmMiOiJBMjU2R0NNIiwicDJjIjo4MTkyLCJwMnMiOiJITWp3dXhUWnJBQlhzdmFZIn0.X4UPcLRJaY19I-iWnoDU7F1t34F5HIrXs5hL2aCQ0jGKlFWyVCR6VA.763cj1X-uigBZkSk.H6j2TPARGv5uHJ06EdBpEfkh0-gQ7It8eF-9z4FEAW5r2QhnC1qOfTDgym7WJ3hxe56DH5BO1bAUAORy9sufw5AldzIo0eBCyONXNnAwsHEiKsAFlXbPMSKEfx3_karNkJ6BPfcsDRMg-Yo07Dj8zBox2B3JdP_IfHF36IxLNaO8Jr3u3B_TWSBuLvpM1fQlUinStf4VUy6WsFGcjs6vioYv0bAzUNSm8Fo5frWnH6qkKgnjmsHpW5lX.ekEAIbs7H6QLxZt_YuJVyg
  1e55e0babffba7d59ab00787f42002c6f528a625.address: eyJhbGciOiJQQkVTMi1IUzI1NitBMTI4S1ciLCJjcmVhdGVkIjoiMjAyMy0xMi0wNiAyMDo0Mjo0My4yOTAxOTY3MTggKzAwMDAgVVRDIG09KzAuMDY3NjUyNjc5IiwiZW5jIjoiQTI1NkdDTSIsInAyYyI6ODE5MiwicDJzIjoidHAyS2UxUk9XQ1F3SWxfQiJ9.5SO8yB2NrbeyWJBoOggrDoFz_JYV1kWditorWasE3TuV79vadDFoag.VBcKNWI5nIQl3aZ6.yisFWlc0frr8coO0CKS_yAGKXpw3_3Vd3AvZQUeErTZCAexMIR2gH6PsE2qfq2uvZAIG3N_-m4OEJhS-gsHRrli4Vt9LqQviTX-0vr9SNy-GWmS5_F0xLuIX4DvMJatkb-mffSUtEFy3bT91ukfkU3duuCG89sWikrVBpBPqJlaysZKGV_zghtqvQlqT7g4CUDVfU0NQHXd937HI30vHDO-jxw_2KkncAYKdq9W7RDSmc6pug4dMFvqH.amx_w8NKKlCVnEiugFnElw
  3dad1e832a0c85e378a58802a0c965a22fc18fa5.address: eyJhbGciOiJQQkVTMi1IUzI1NitBMTI4S1ciLCJjcmVhdGVkIjoiMjAyMy0xMi0wNiAyMDo0Mjo0MS44OTQwMjg5MjYgKzAwMDAgVVRDIG09KzAuMDY2NDI1ODM3IiwiZW5jIjoiQTI1NkdDTSIsInAyYyI6ODE5MiwicDJzIjoiS2VJNW44dWlfNUVua1ZWbiJ9.Ff2P3RisCRFeq0KgIeV1eXz-86dfEKfk9jk2pmZESR4uHV6xAkbHdg.ddYdgmRSg86S3B06.c16VlvwKKCvyMBxJ_qxgkETM-4Gq77NqOCIzemtJ7JjwiGwkUzlqVkcNsq91onUhNfGyEsCmixUsQJk1MUMLR6SBwGVtyG7kIOs--j1LIIzTgmol0-QGlcy3L1QSkRXJpDpQvWMY4jtcyfea1SRdawUB7oROEbb4bunkwsmruQNnwaPUBF4FZ-0E-alI9wZkzaRp7_iQF_B9XtK7f5-fPRfEw0A_azgpf3nCS_tcQ1a8ESNv2rwR2pbD.Gov6Qzs2Qq_LxpE__Fze3A
  969bc9bcc7c9014dee1b01e228470ae2d67a00f5.address: eyJhbGciOiJQQkVTMi1IUzI1NitBMTI4S1ciLCJjcmVhdGVkIjoiMjAyMy0xMi0wNiAyMDo0Mjo0My41ODgwODk4NjUgKzAwMDAgVVRDIG09KzAuMDY4MDYzNDgxIiwiZW5jIjoiQTI1NkdDTSIsInAyYyI6ODE5MiwicDJzIjoiTjM5NWZ4Y3JweU5xemFSNiJ9.FZXmumh4AuyWc7t929vmMZ3FaYgXAttqQuoUiAAJAcE_9vkWX7IKkw.PI6c6w6pJn9EGV4m.ekaIl5Gjozoh86rQddFIAM-szAWhap5UMSB6ecPc9MSu29-zjUPqt8gvarR7Wi3eVhCpZIF0JGwyRiBYLqWvSQnTrgIdH2qfwi0gYFyqIBUqBUvfU9FL2Nk7MpDf02sIcoNRSNYx5x0ceLQ1gmqNdY6AHEBwL9MOV9iS2aGS_kBNt0kG9vUUGA92qjz32rhNFXAFlE3JwOKNxb7O6uWlfiP3YxG7kcZ25iLwwvaDe_MeX64WyqalNPA4.XNto7eZHh4vH23DZqV3h3w
  a3046902df1497f17bfdbe4e2535392cf74619ce.address: eyJhbGciOiJQQkVTMi1IUzI1NitBMTI4S1ciLCJjcmVhdGVkIjoiMjAyMy0xMi0wNiAyMDo0Mjo0My44OTY1NzQzNDIgKzAwMDAgVVRDIG09KzAuMDY4MTYwNTczIiwiZW5jIjoiQTI1NkdDTSIsInAyYyI6ODE5MiwicDJzIjoiTThoam1HbzFBVE4xLWlfbSJ9._4A-WH54MhKJtQiLNgcgQnXTY1B4znR4juF-UdTt5AaZE7eCuQcoYA.avcvRc0Vy90bmW5K.g2iTtcqX05ya0MfV76FPNL4e9WXcTLXqr3C4xpUY2S_40BQBqYaT7cMZ0rvtWYAnt7BkVjvMc43PATS77MXnum4Et2nCUqXyh4bxNnpMd8Pjd0QGqJ2UYvKELebra85dAHWEnh6Kk_Y4RlY2MdebUaZDu1U1qeTEQLrpNyCoA7QKlCWsj88AUgQNiW-Vu6QCYF6PzBgNur02CJL0B5KRMJsfz8KzIBamsvwF8F21twnyFhpM-S6Sm-Ha.FDE8Khw2oCmHHHNgKNiIog
  a3a29ba4987fd6b678743d32a9e029d2d56f9797.address: eyJhbGciOiJQQkVTMi1IUzI1NitBMTI4S1ciLCJjcmVhdGVkIjoiMjAyMy0xMi0wNiAyMDo0Mjo0NC4xOTEwNTgxNjggKzAwMDAgVVRDIG09KzAuMDY1Nzc3MzIwIiwiZW5jIjoiQTI1NkdDTSIsInAyYyI6ODE5MiwicDJzIjoiRUsya01rWWNZblZJT2Q2SSJ9.nM0p_QbBOXlnlGECoV_vMey46M9LMhosszUsiAt90ZfGLrHSCwjzyA.d1_bANa0FwMl-GYg.5Cu0h9AkErX894XxFR3Yh9JqEmZJsixLka9SiRTmBXWCuvm6sdYGpAylC_NdQNj15PZkQ-KgtuFAqOak535gLHJlW_BWKcbUg6uJvy3T1-5DZkHoqsl_huM6lKgyRu-OHFreD8tasyF5LchV-qB0LhKl1A-u3fel7zxzGcxyYYR8i8khNZD_Gn36VFhDNgTEUHjGpishlmWHplzfK4fkt9eLAiYLy8PVetjbXuU4IjqO6hgTlxCIcFKm.07aRwv1gkhud1XDa6lQEDA
  app1.info: eyJhbGciOiJQQkVTMi1IUzI1NitBMTI4S1ciLCJjcmVhdGVkIjoiMjAyMy0xMi0wNiAyMDo0Mjo0Mi4xNjE2NzQzMTggKzAwMDAgVVRDIG09KzAuMDY1MDgzNDI3IiwiZW5jIjoiQTI1NkdDTSIsInAyYyI6ODE5MiwicDJzIjoiM1hxNF9vRDZvVUZtdmU4TSJ9.vTajZ5diP7_NSqoyYjPHVScIANyhO_laEEwjBy_fcd2rcui24fR5zg.RXGLf4w5Ej7L9P9B.w8sQzyyTYsq6gV2RYZ22mss_XgswAqXOSQKqlmswRP3iJoVE7A7XP4V0Y20wUDo2NKFrq4KTvzzFpCIETRWTQTrkBUjmAt-Zl2CMMRUqIVURnPu6XFPGYCBI4kQEwTEni2EwkRrOhqHTSZ7veFZdXcAMto1VFPStKXvcXGpRz1vD0s80-PRsB6DAZqyj_t2jEvJNRGIMBjWKt98UvbJe2x4A24dCLXbLivnrPuwJr-SFzp6Qd9_KbaIvw8CoZrayPhm1wSi7zxMiJwrf6rYf4EjoOlTyT-HZGhVKdV8iMSoRrjjafYEswzbvmtz4Rb6Ffg0c-sTPDsmx0EzLpHiNiwRCQNwkaGuTSrZ1Tr4gQR1r3meAfR6R2e0nOBCwc8K8aaND89dVIuUgDZ87RrI3xB2NCmDqtrVqLgFUUjGJ4O2KgQ3uY94HVuyJCA.0QqzMbUBsUjwY9jHzA9fYw
  app2.info: eyJhbGciOiJQQkVTMi1IUzI1NitBMTI4S1ciLCJjcmVhdGVkIjoiMjAyMy0xMi0wNiAyMDo0Mjo0Mi40MjYyNDY1NTggKzAwMDAgVVRDIG09KzAuMDU5NTkwNTE2IiwiZW5jIjoiQTI1NkdDTSIsInAyYyI6ODE5MiwicDJzIjoiX3NfMUp2LVI1ZnF6ek1CdCJ9.9htuzgetKcTREx0Xh2YUB1IqBKK_cRMntKB17cyPsv5S7uFi1KOTzA.ws_Czun6em6ufhlT.VduCwvR-vd8tO-kRu8zA1jaVZgSWXBzyno6NC3OXdzAoqN5zr4dWWezb1WCSUw_5gkeX_SzGTsdSG-DS0ho8XBjerNtGnCpvC_sUvnbKQiSE0SQWP5fuGVvFDSqYtPsBCuJTevlFJOaJEDSdSWVVlyQk-N5eVNtzS1nkOXmotu1xWtSHoXEH6BlSqmQy13bJOfjgsHUwrIR--9A1QjMiw_Ow7QZd6MBorjkS2zMJGnCDg9o4nWIpVN6Bxx88W2_jeKkhhZGW7LVQqnm_DP510eUnqTEtKcKJ8_mUkQ9_6k4QvLBSbvHv95NCxnsJvEolx41n48RJLTC3ciWP9r-BOusWjaWqO5O25VqxZEmDwBV_eHU2gZ68OBbKYtXhqD77iVcP_wX2qKPvpcLtMxVnE7xYjvAeUd4D2zQyIBZBM6kZ9FNWkX_WbQLTbg.wW1KNeNOCXhb2e-C8FX8PA
  app3.info: eyJhbGciOiJQQkVTMi1IUzI1NitBMTI4S1ciLCJjcmVhdGVkIjoiMjAyMy0xMi0wNiAyMDo0Mjo0Mi43MTY5MzM4NDEgKzAwMDAgVVRDIG09KzAuMDYzNzYxMzYyIiwiZW5jIjoiQTI1NkdDTSIsInAyYyI6ODE5MiwicDJzIjoiZHVSZ0NobXh4ckZ4RVU2dyJ9.vVc0hcFNL_pMemdQpwVTsFuBGpGe_K7sEfmdz9lPbgK5D9I20yQb9A.UBkoaQb8CN_zqfm4.zRYqbQyiZ7gHQCkTctV5Fd05auNEP8A98nTi2jBRwCQlIPGz8sy9RsDWyNKDQiReHFuw44zj6TTM5vVmK5QN7RuL291LVdv3eMmULhKNPQI7IBf26N8i0m8armgA_7hhlhvZ5SZFkzVsMPIs0p8SCB6pUkKKFnG3Ala_mcY1r9KMYRgVG-YtrRqNrdlKbREoEhBj66JtTBvm9NWZb2Zpph_ZA2THwItELaBeYwnY5DllENqvJuWBd3tUNN9596b2Z8wJxOgXWmxpQ_bTBx5qCwzAfIvMCf4zZvBviSX68Qvo0u9GSWKu6gljUoCn07FgU_JC3RAwYOAbn-jQLbzh9H413v3ftLXbSJKYeseGe4z4TrBymgnit7hXQZ4zHysE8cAU1mGbDI23Ts6LpmhOS_NDluS9pImW4e7z1CvhZnB4zXFiiGsjwTew_A.qJBko9dkB4e4dgbdDCRHXQ
  d8c0ba27c0b9f8682bd896cabf30b9f57a5631b3.address: eyJhbGciOiJQQkVTMi1IUzI1NitBMTI4S1ciLCJjcmVhdGVkIjoiMjAyMy0xMi0wNiAyMDo0Mjo0Mi4xNjYxNjc2OTcgKzAwMDAgVVRDIG09KzAuMDY5NTc2Nzg1IiwiZW5jIjoiQTI1NkdDTSIsInAyYyI6ODE5MiwicDJzIjoiZjF5UXhZODRYYWdKNHd4SiJ9.Y5VjSV3nnll8RkxAFDvXzi7HrS2AdExFr6mTYbMl5wfwE7EaVY8Ydw.h_z1T315RWfdD1-p.XscvFu974aRiHYNTYEKBcTE1QmrZggeLBV30LmW6mxKqyilJWd0q1t2BsGA6_-fkxVCgxH_wDak6Oujd2cttGpeMhzqwe5nmeqp-vfLUL3n02W0k8HP7_2ZkL-3kGzg6RSEBlR355-I9Ca92IffBg1FHXLogIOndNT5_BEXiFQbyg4xyAeaP_oundhdkQCjz7jRRf1NdOUc2Min5Jl1HFqKbJZyLqg7ATRe7B3xdWP9a4A.DOcoHeDv8kRGNvHOMDyS7A
  eb97f75212db949a7d123e6cdb7419106e811ce3.address: eyJhbGciOiJQQkVTMi1IUzI1NitBMTI4S1ciLCJjcmVhdGVkIjoiMjAyMy0xMi0wNiAyMDo0Mjo0MS42Mjk2MjM3NzYgKzAwMDAgVVRDIG09KzAuMDc2ODY1MjI1IiwiZW5jIjoiQTI1NkdDTSIsInAyYyI6ODE5MiwicDJzIjoiSk92REtwMEJpRWpScy10OSJ9.xVmaN9b1Lcms7hbUkZNPg5l8EuzHfw8_vNy0OYG2gUy2tMJ0EsFbNw.BYHVJAwcL-DpvIQP._Dqd7HhXEQwP3znHXp_YtUw4VJJQ5KCxr6_hU4j1nAsyvRIc4dA41cQ3_-AZ2HFkm5CoTIexloyLZ_e1WqLBC92wIcIa9SmMMTvzZxFy2Pd7dhSY0VWhtkHdT3_BzxG_QoxesuFZ7wdAMBKwSvVy2SPGGk4BJEE0NyC13GXx71AtCeE-9OTk5pFVUtoRNCJWtVEQ6rCypsUkftqKW3u3LA5POkgU427z64tkuaT2VWr-m7_NZRc.CJTjTD5VItWU4ZcD_PwdGA
  f809cab0e7604eb160facf403afc071baf08127a.address: eyJhbGciOiJQQkVTMi1IUzI1NitBMTI4S1ciLCJjcmVhdGVkIjoiMjAyMy0xMi0wNiAyMDo0Mjo0Mi43MjE0MzYxNTYgKzAwMDAgVVRDIG09KzAuMDY4MjYzNjg3IiwiZW5jIjoiQTI1NkdDTSIsInAyYyI6ODE5MiwicDJzIjoiaEdyNV92SHJMTnN2WkR5SSJ9.pIrrgtP7bRALmy5I0RXZ39otlFfqVaYYHB_hGz2P10PqWBU6iBlw5w.dbTpkkPDhOPdCLbn.5zo40z3tDh_n96oYR319XToHe4ltFvzHZX9HaHFfk42SWnpyZGxtfqST7qE1pLduCVjkRB2B1KRBsw90fR2LIfqKGv4Hx_xFzihvODo5MqotLgrDoTvRCl0aJjGSt_g4VT3ArONbjY3p7xSrRiAbBmyCEp58Xh-z7tdS8h23f4CcIFftygn182HS0g2vIUZ-mmVtWD90my9PWavtFzmY2eEtL16rBm5u2oPVj9TdPru26w.u_Rq-6PBsfw_eB4BuuF9MQ
  faucet.info: eyJhbGciOiJQQkVTMi1IUzI1NitBMTI4S1ciLCJjcmVhdGVkIjoiMjAyMy0xMi0wNiAyMDo0Mjo0MS42MjQ0OTYwNjIgKzAwMDAgVVRDIG09KzAuMDcxNzM3NTExIiwiZW5jIjoiQTI1NkdDTSIsInAyYyI6ODE5MiwicDJzIjoiY01WZDdkeWlDb1VKX0VCRCJ9.dxUAdeGrDu8I1HMmyFPMTotef-0Nme-K43S3ZSEnMeaMRIHd9cG3AA.r3jMd3Ywy8sHsYiH.JQg1rps6RjFOPTiv75YA-ZDeBB7PXOrsjlZ5LyloZCVJTunG30wMuTx4-P2gTVDSclIPzJfs7WWNkU0pzBLnTYtyTYKc_b-Rb2spRqEFmvAgUpbUMMrgqtT0cjNcCdrfs8nWoadfcO7yT7bhmco0BqDm9lTPwB1-1DaPVCzJanTzlMabrDTmSHJyWR2s9BWAfvubCzYfWwA-JwL9ZeJ6G7GaOaGt_3PFxfMfmez_ASFfVdr11DsGNdNjz0Ecxz5aAzH2rD86HCuZf15Qy4BMTYcIfs0xhtRBfiLECGSQSgabIuf739il1xTAldsUldTbhLkGpeTszlsqr97qusgJfKpgqBSEdCZfNrJWoPAnBEu57O0Toxgc55172cUkMGIl_mCgDCkslXZRhuGmJ3UBS_SlNSwnmpFUBAELT3dYtwMLw_wKCL0aokH0fJ4l1jSAKg.WJqgl7V-plVegn4XajJhnw
  gateway1.info: eyJhbGciOiJQQkVTMi1IUzI1NitBMTI4S1ciLCJjcmVhdGVkIjoiMjAyMy0xMi0wNiAyMDo0Mjo0My44OTIwNTU4MTcgKzAwMDAgVVRDIG09KzAuMDYzNjQyMDY4IiwiZW5jIjoiQTI1NkdDTSIsInAyYyI6ODE5MiwicDJzIjoiM2VkbGd6cjI3Vld0U3BhcyJ9.JAVmmg88vfOVij0TwlMApnV01MkLrJaocwCCaDmA462463GXULf4cw.L3i_odokF5-6mwKV.Xoh_UswVvHVWFnAugsYWZ-tBcl4npbgti1mtMa5e2Lw5EBofdiuBmywOYKs0L8d7RqPgRRP4weJHvAzxUQFWJQcXSR2BSobf1gA6GvIb8X9s3nf_XDWSiFXK-A0FtDOyfD6CSk6IBnqqeUgY03b4RwIeocBO1jCtvRMDd6iV7Rrzw0N-FIjt5z97gnRqjRH2xk5W1VLySDPy6qr-thKI1sMK8ti-_QNNH-Kr-GrR9YiS6KnX0rsvMaxnvduVV0HjA1SQMJTsVkyv65vPari_oMh3GVZ8iyYdypxwkBIkv1Wf8dqmzyZygsPVXhE-yAxT1iM_7dHK8C_IOf5BxzclK73uweHRkE6Qby-vRUqJfw-Vx6fyyrLtrrIrmwhNxnVpLv2_NDzOSwa_D42ovD66lk_5XnBJMOY4qsOlKrRWlrWHKOaKea0GMfZvysBWtQGCEUn0.ckuoRu17N28CZPjy_LxIMg
  gateway2.info: eyJhbGciOiJQQkVTMi1IUzI1NitBMTI4S1ciLCJjcmVhdGVkIjoiMjAyMy0xMi0wNiAyMDo0Mjo0NC4xODY2NjY1OTEgKzAwMDAgVVRDIG09KzAuMDYxMzg1NzMyIiwiZW5jIjoiQTI1NkdDTSIsInAyYyI6ODE5MiwicDJzIjoidTlWZ01MWWRXS1NrZ3hpYSJ9.g3q31Jp1R-tiELuNJvUKaqLvo9YPdNwrpHgtcyVFAPypj2wruCn5gQ.wgiO-b_MNFFXqS-z.mXnUUmXai_gBbd1nmA70npc5ofN2PVdF9dRoA31_Cz91UGx9sETNGrguXwSuvtGS-MC-fFjmMPcWAnbxqcm1neWYt-_kv5wUTy7E5RjFe6uUoZSAhrWsppvK-zoTtDR06cpOWZpLxca1lY1u5TRsN6loNo_d7j-eJw5FZPFWNA7H9MZcvdH79OReBKr6_WfzM8vwHUldG5su9YdNXxdeQIRlhMbCPXr2NqoA8z5rT6dfIprrTZVApebfrXxcXVp9nEBzAAuUJ-w71IFIJrtsFQSr3lrc65wBSOQDm6zSsKpSsUL_Ed8kRZLyrSkJIEObMihWciuGIkhaTzZ39lvV04Tzkt3ItqHnFqy6_OTg9Pd7hfZHukrchJHE3fHmjmrtv944v3eSLl4SS7GqaaCjc-Ayi1ZpF-E8BrgInC7Y2pHVaRApbVk_kcTMhGQdKPaNhQIG.18fFNTJHsGf4ZogJuGNtkw
  gateway3.info: eyJhbGciOiJQQkVTMi1IUzI1NitBMTI4S1ciLCJjcmVhdGVkIjoiMjAyMy0xMi0wNiAyMDo0Mjo0NC40OTQyOTc5MzMgKzAwMDAgVVRDIG09KzAuMDYxNjA4Njg4IiwiZW5jIjoiQTI1NkdDTSIsInAyYyI6ODE5MiwicDJzIjoiOHJqdkdkZjBKMzJNbDVPMiJ9.mOJi_LK51bXez64TGZ2FGX3qG1BQu-PPWsXF8tiX66V3o3hhtHBw0A.tluqK0RYXrBWZTHB.eJrovMdv7T3lOAEhgdyfdoJmB2A5r2LNQc2pyUZIpv4hwz9ir_DKs3HHy1aDdTjxvbg9AdJMISLPWO39089QWHTWviXv5ZoQo5tRr9KuGXgl2KscFpOJe7YETsPP3T9y1J6ISq2Kgd19z6x89wU0ZkFICxyb-NH33Py37MyNqeTDkUAcuzLZuQ4jG9dZ0st-yJpVRRJJCB4nzI8KY6ar9oW2SLDPRqzUp-GN-Jozpey2bGDV4sQ1UG62L0uKSKv5-KP1_O3cKgWXyodXQX_u4NKqx6LQ2sDUAB1Jr--ucfhbfLAd0HRvQOm7e8sr1YYm7QumAUOzpcqpIhsZs3ChmSkGVEo2KzsfUxbM5iclzHWr3heaTdbrocjjERj6sCvy_G0Nlnu6MIScxpT9bACdzZTyCNL0i0-NS9_pvYbdry4etG5U9VxIrm6pAGKdbwyXPwgE.eLTBebxBZOxAdBLJG811sA
  sequencer1.info: eyJhbGciOiJQQkVTMi1IUzI1NitBMTI4S1ciLCJjcmVhdGVkIjoiMjAyMy0xMi0wNiAyMDo0Mjo0MS44ODk2MzAxNTQgKzAwMDAgVVRDIG09KzAuMDYyMDI3MDg1IiwiZW5jIjoiQTI1NkdDTSIsInAyYyI6ODE5MiwicDJzIjoiMllOQXBvQ2hEQ0FmQWxaeiJ9.5qGIadj3Z1YqYoVrdIqsCNYuv-s4A60jPhJlxH0GmIv6IqzST-aEow.DeZ2pa0R7PcVJ_mj.aQMYsFyMOV_Xk9kn9rYcM-gZOWUg4UOyrl8DKB1GtV3P_TYNx6QYwlhy-U0Ne2nrXPBSM0uoZ8x8lTCwgqIAOhv-yrO6sbOLe3tq8O_DrXAyHPuy_8H41xdyzohD7IhQsMFUPXmZSgtgw6pl9Zs_V2BfgICoOfi5FFUD7VwKeqJTj5xmMXcb3UwiSxdwlkUklkeFienwTC_oW0lZh_7NJUDjT0tTPt-296dvQkSMHHMDNT2Xw1_UrW-dMkVMil_5Wg30dtosMMPorB8v-0ajumQIyakxOZm6vmQR30TVS1bGyY-FrPiDVoYUv-6PTEaUQzkdh-oIOu7V_URGvLGlOgULRCV0094HtJXbMe7DJtuaZeqeH7ZI0MVQkewK6xWhWMOdXR4aT2sMcAlFIqwkUk0-dQIBLvloD7wUvCh8HpqckxwERJxRJPyP00K1PqCeGv86RlUhi1f9.sH4bm8CADBjWoal3aEiygw
  supplier1.info: eyJhbGciOiJQQkVTMi1IUzI1NitBMTI4S1ciLCJjcmVhdGVkIjoiMjAyMy0xMi0wNiAyMDo0Mjo0My4wMDA1OTU2NzUgKzAwMDAgVVRDIG09KzAuMDYwNzAxNzA1IiwiZW5jIjoiQTI1NkdDTSIsInAyYyI6ODE5MiwicDJzIjoiejNjLVY2Zk1tTDBoTWlMbyJ9.aXKJ26ubj7jtvchERnD3uHqrA-568KOC1VR7cgLi2U9kOWkKJ-ZxrA.L35mGMsD3L2On2x8.yQz9LX2ntxxP-gA5ZzAsEIOhNnH_pxKsp9dip3kdMSRiG6hgCGYZnA24-a_ORKR6Uj8SWus8PeO6kPlNz9Bvbs17dRcyMR1DBJqd0Z0DlRuR7DdoXUoCn5nIH2tj_zZVaz4GGTQaJwhiZJL-QkHa9ea4mM8NXmprlRxAVmon9Rp63j8JwjbjPUHZvOt6TuDZZNKUzQQAYDVrxNWq0J_8D6tnjY7QvI_o_sSgucL-urG-lv2zMIJikDZth-H_kUi6QwJWj_rVCMn8u0uoE9TZRs7klTy2i-Ta1xkaPCt6epx37lHGLn4O5Dwl5yfVRX9O9E8ySr-6bGLQOVS-DOXvsYmze3UcY31YukF4T1m1qpIrSjowOEmHdNqIB-9gG2ld2iDucSjPyQ8k3M2algzM8BFmIpRF8glewY-dRs2aeLRmy_-LBLXNggy3wZIdtX0Ou6jHf1v6ifc.GtZXfwVy8cXUPDDTYxlugA
  supplier2.info: eyJhbGciOiJQQkVTMi1IUzI1NitBMTI4S1ciLCJjcmVhdGVkIjoiMjAyMy0xMi0wNiAyMDo0Mjo0My4yODU4MDg5MDggKzAwMDAgVVRDIG09KzAuMDYzMjY0ODg5IiwiZW5jIjoiQTI1NkdDTSIsInAyYyI6ODE5MiwicDJzIjoiTGdoUC1zSVlnaDRNRHFRYiJ9.2G_BINoIaYN6cc3KmSpiRaIsiXPS3y5BrVUT3LSV2ix9rgEHeCQIog.-hiZ68VxPRXZCoLw.cL3kMwor4XTKVpow2i-oS2eCs4lG_OndgMikO4pHGagwVfHlmIms_s4yjY9NWLavIz5TEivwiLub7PtWv4x1z2hUqHoeqG1Y12sohrt7bnGf3fE5m_bGDbxi0yLRdatCBt8EyhIgYLuouRSdVa54MDFhrRG2IEzsnFWy_11QcggUiFTD6vNVPl4--hOIL2FNMwPoIzDWaPf0fni03bYOjInkUUYMSOEh9QsDndvOT04_07It01KMLgWRv3VcBQFakXT7QSVG49UYeHx8rJEH6GI_J3P4L2tD6jFw8wmPKMWXmP8v3BJztx7ZmHerjglY2nXmTqQqWN9hu33VpQgzrmFCrpJxlrah1ex5MIFm49SvpZ0ro5ZK1V4T6LqU8wzEi2yo4u0JwXAT8drNE-hiS1KMZzcESU1hSmoH_26ADKKtAkN4S_cwF_Z4ZpfCI4JwYbXplfrfK0E.TH2ildMzvj0LIJoqVxZTMQ
  supplier3.info: eyJhbGciOiJQQkVTMi1IUzI1NitBMTI4S1ciLCJjcmVhdGVkIjoiMjAyMy0xMi0wNiAyMDo0Mjo0My41ODM1MDMwMzIgKzAwMDAgVVRDIG09KzAuMDYzNDc2NjU4IiwiZW5jIjoiQTI1NkdDTSIsInAyYyI6ODE5MiwicDJzIjoibGotc2g2djFnbm5zM0Y5bSJ9.kx7NfLvYEzhec_oItBp8IlWdae5jxepxlBxLeYgjJzWPgIOf2Lha3w.mNm2EfMXJJl4nFTz.0BFf61fIE9kJSw4s51f4UD8jtn7-vFq3eyneU541ze7t3CwqO6DADcL7-ewZIFMVAfC87eDhFS0152eadMTnpYjnIthiY4CfQKA1JEv3B0ARtens89L7AgiDV-3ikIfgjzmT9fyhDkejy9X51ke4wzAqPebmlykDAa7jNUvUgfVg5bAEBP7xnEzxDX7R9U6rUf3jFjIYxyis2RLBVfGyZj4ZL7EcmaAakIHlJT_0dz0DwhnToKb3z-LIq3G9k_rQPavx_NUbZ8w1VUr0BfopH5Sy-GkjMcNoYi2reTnrnemVJQFBwESrb1UGLr75J1PDQPsdc_1ikpFWk7rEsRPgPPgOR7Dm4WC9rrXvlqQ_i0hvIL_uuz-cx6RKkwsE2QGPkZIGjDLtDFidvHRN-RpXjrU4CyZ_jxQGyzlFhF0700FYXkAKnUC5DwyA1zJXkoWFSTqdGOFfSR4.Kk3-RfobmLCEYTIBUhXT9w
kind: ConfigMap
metadata:
  name: keys-testnet-1
  namespace: testnet-1
